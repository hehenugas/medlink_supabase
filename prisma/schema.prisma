// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  email        String         @unique
  password     String
  name         String
  gender       String
  major        String
  studentId    String
  birthPlace   String
  birthDate    DateTime
  phoneNumber  String
  avatar       String

  messages Message[] @relation("UserMessages")
  appointments Appointment[]
  historicals  HistoricalData[]
  pharmacies   Pharmacy[]
  mriTests     MriTest[]
  urineTests   UrineTest[]
  bloodTests   BloodTest[]
}

model Doctor {
  id         Int           @id @default(autoincrement())
  about      String
  name       String
  specialist String
  education  String
  experience String
  location   String

  appointments Appointment[]
  messages     Message[] @relation("DoctorMessages")
  practiceHours PracticeHour[]
}

model PracticeHour {
  id          Int      @id @default(autoincrement())
  startTime   String
  endTime     String
  dayOfWeek   String

  doctorId    Int
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
}

enum Sender {
  USER
  DOCTOR
}

model Message {
  id         Int      @id @default(autoincrement())
  sender     Sender
  content    String
  time       DateTime @default(now())
  userId     Int?
  doctorId   Int?
  user       User?    @relation("UserMessages", fields: [userId], references: [id])
  doctor     Doctor?  @relation("DoctorMessages", fields: [doctorId], references: [id])
}

enum AppointmentStatus {
  pending
  confirmed
  rejected
}

model Appointment {
  id          Int      @id @default(autoincrement())
  date        DateTime
  purpose     String
  information String
  status      AppointmentStatus
  confirmTime DateTime
  queueNum    Int

  userId   Int
  doctorId Int

  user   User   @relation(fields: [userId], references: [id])
  doctor Doctor @relation(fields: [doctorId], references: [id])
}

model HistoricalData {
  id          Int      @id @default(autoincrement())
  parameter   String
  value       String
  unit        String
  information String
  date        DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Pharmacy {
  id                Int      @id @default(autoincrement())
  namaObat          String
  keteranganPenggunaan String
  dosis             String
  usagePerDay       Int
  usageDay          Int
  jamPenggunaan     Json
  tanggalMulaiObat  DateTime
  tanggalSelesaiObat DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model MriTest {
  id        Int      @id @default(autoincrement())
  urlPhoto  String
  keterangan String
  tanggal   DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model UrineTest {
  id      Int      @id @default(autoincrement())
  warna   String
  bau     String
  ph      Float
  glukosa String
  protein String
  date    DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model BloodTest {
  id         Int      @id @default(autoincrement())
  hemoglobin Float
  leukosit   Float
  trombosit  Float
  gulaDarah  Float
  kolesterol Float
  date    DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
